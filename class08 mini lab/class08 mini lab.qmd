---
title: "class08 mini lab"
author: "Chris Yi (A16849780)"
output: pdf
---
Today we will do a complete analysis of some breast cancer biopsy data but first let's revisit the main PCA function in R `prcomp()` and see what `scale=TRUE/FALSE` does. 

```{r}
head(mtcars)
```

Find the mean value per column of the dataset.

```{r}
apply(mtcars, 2, mean)
```

```{r}
apply(mtcars, 2, sd)
```

It is clear that "disp" and "hp" have the highest mean values and the highest standard deviation values. They will likely dominate any analysis I do on this dataset. Let's see 

```{r}
pc.noscale <- prcomp(mtcars,scale = FALSE )
pc.scale <- prcomp(mtcars, scale=TRUE)
```

```{r}
biplot(pc.noscale)
```

```{r}
pc.noscale$rotation[,1]
```

plot the loadings 

```{r}
library(ggplot2)

r1 <- as.data.frame(pc.noscale$rotation)
r1$names <- rownames(pc.noscale$rotation)

ggplot(r1) + aes(PC1, names) + geom_col()
```

```{r}
r2 <- as.data.frame(pc.scale$rotation)
r2$names <- rownames(pc.scale$rotation)

ggplot(r2) + aes(PC1, names) + geom_col()
r2
```

```{r}
biplot(pc.scale)
```

> **Take-home**: Generally we always want to set `scale=TRUE` when we do this type of analysis to avoid our analyses being dominated by individual variables with the largest variance just due to their unit of measurement. 

# FNA breast cancer data 

Load the data into R. 

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names=1)
head(wisc.df)
```

> Q1. How many observations are in this dataset?

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```

> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
ncol(wisc.df)
```

```{r}
colnames(wisc.df)
```

A useful function for this is `grep()` 

```{r}
length( grep("_mean", colnames(wisc.df)) )
```

Before we go any further we need to exclude the diagonoses column from any future analysis - this tells us whether a sample to cancer or non-cancer

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```

```{r}
wisc.data <- wisc.df[,-1]
```

Let's see if we can cluster the `wisc.data` to find some structure in the dataset. 

```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```

# Principal Component Analysis (PCA)

```{r}
wisc.pr <- prcomp(wisc.data, scale = T) 
summary(wisc.pr)
```

```{r}
biplot(wisc.pr)
```

This biplot sucks! We need to build our own PCA score plot of PC1 vs PC2

```{r}
attributes(wisc.pr)
```
```{r}
head(wisc.pr$x)
```

Plot PC1 vs PC2 the first two columns
```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis)
```

Make a ggplot version of this score plot

```{r}
pc <- as.data.frame(wisc.pr$x)

ggplot(pc) + aes(PC1, PC2, col=diagnosis) + geom_point()
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

```{r}
summary(wisc.pr)
```
0.4427

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

4 principal components

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 principal components

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

```{r}
biplot(wisc.pr)
```
The biplot is difficult to interpret because it overlays all variable vectors on top of the data points, making it cluttered. Using a scatter plot of PC1 vs. PC2 is a better visualization.

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis, 
     xlab = "PC1", ylab = "PC3")

```

PC1 vs. PC3 still shows some separation between malignant and benign cases, but it is less clear than PC1 vs. PC2, indicating that PC2 captures more variance related to diagnosis.

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean", 1]
```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

5 PC's



```{r}
data.scaled <- scale(wisc.data)
```

```{r}
data.dist <- dist(data.scaled)
```

```{r}
wisc.hclust <- hclust(data.dist, method = "complete")
```

> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h = 15, col = "red", lty=2)
```
h = 15 

> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k = 2)
table(wisc.hclust.clusters, diagnosis)

```
2 clusters gives better separation between benign and malignant. 

## Clustering in PC space

```{r}
hc <- hclust(dist(wisc.pr$x[,1:2]), method="ward.D2")

plot(hc)
abline(h=70, col="red")
```

Cluster membership vector

```{r}
grps <- cutree(hc, h=70)
table(grps)
```

```{r}
table(diagnosis)
```

Cross-table to see how my clustering groups correspond to the expert diagnosis vector of M and B values

```{r}
table(grps, diagnosis)
```

Positive => cancer M
Negative => non-cancer B

True = cluster/grp 1
False = grp 2


True Positive 177 
False Positive 18
True Negative 339
False Negative 35

We can use our PCA results (wisc.pr) to make predictions on new unseen data. 

```{r}
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning

```{r}
wisc.hclust_ward <- hclust(data.dist, method = "ward.D2")
clusters_ward <- cutree(wisc.hclust_ward, k = 2)
table(clusters_ward, diagnosis)
```
I prefer the Ward's method (Ward.D2) because it minimizes within-cluster variance, leading to well-separated, compact clusters. The clustering results show that this method provides the best separation between malignant and benign cases, making it the most effective for this dataset.

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[, 1:7]), method="ward.D2")
```

> Q14. How well does k-means separate the two diagnoses? How does it compare to your hclust results?

```{r}
wisc.km <- kmeans(data.scaled, centers = 2, nstart = 20)
table(wisc.km$cluster, diagnosis)
```
The k-means clustering with k = 2 performs well in separating the two diagnoses.Compared to hierarchical clustering (Ward’s method), k-means provides a similar level of accuracy, but Ward’s method appears more stable for this dataset.


> Q15. How well does the newly created model with four clusters separate out the two diagnoses?

```{r}
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k = 2)
table(wisc.pr.hclust.clusters, diagnosis)
```

```{r}
wisc.pr.hclust.clusters_4 <- cutree(wisc.pr.hclust, k = 4)
table(wisc.pr.hclust.clusters_4, diagnosis)
```
The 2-cluster model provides a clearer separation between benign and malignant cases, making it the better choice for distinguishing between the two groups. The 4-cluster modelresults in mixed clusters, where some contain both benign and malignant cases

> Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses

```{r}
table(wisc.km$cluster, diagnosis)

table(wisc.hclust.clusters, diagnosis)
```
The K-means clustering model and hierarchical clustering model (Ward's method) both perform well in separating benign and malignant cases.

> Q18. Which of these new patients should we prioritize for follow up based on your results?


Patient 1

