---
title: "class 13"
format: pdf
editor: visual
---

## Import countData and colData

There are two datasets I need to import/read

-   `countdata` the transcript counts per gene (rows) in the different experiments
-   `colData` information (aka metadata) about the coluymns (i.e experiments) in `countdata`

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
metadata
```

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

> Q2. How many 'control' cell lines do we have?

```{r}
table( metadata$dex )
```

We can find the average (mean) count values per gene for all "control" expierments and compare it to the mean values for "treated".

-   Extract all "control" clumns from the `counts` data
-   Find the mean value for each gene in these columns

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[ , control.inds]
```

```{r}
dim(control.counts)
```

Now find the row wise mean

```{r}
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts [ , treated.inds]
treated.mean <- rowSums(treated.counts)/4
head(treated.mean)
```

Let's put these two mean values together for easy book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
plot(meancounts)
```

```{r}
library(ggplot2)

ggplot(meancounts) + aes(control.mean, treated.mean) + geom_point()
```

Whenver we see data that is so heavily skewed like this we often log transform it so we can see what is going on more easily

```{r}
plot(meancounts, log="xy")
```

We most often work in log2 units as this makes the math easier.

```{r}
# treated/ control
log2(20/20)
log2(40/20)
log2(80/20)
log2(20/40)
```

We can now add "log2 fold-change" values to our `meancounts` dataset.

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```

We need to filter out zero count genes (remove the rows/genes that have a 0 value in either control or treated means)

How many genes are "up" regulated at the common log2 fold-change threshold of +2

```{r}
up.inds <- meancounts$log2fc >= 2
sum(up.inds, na.rm=T)
```

How many genes are "down" regulated at the threshold of -2?

```{r}
down.inds <- meancounts$log2fc <= -2
sum(down.inds, na.rm=T)
```

## DESeq2

To do this the right way we need to consider the significance of the differences not just their magnitude

```{r}
#1 message: FALSE
library(DESeq2)
```

to use this package it wants countData and colData in a specific format

```{r}
dds <- DESeqDataSetFromMatrix(countData= counts, colData= metadata, design = ~dex)
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results (dds)
head(res)
```

Plot of fold-change vs P-Value (adjusted for multiple testing)

```{r}
plot(res$log2FoldChange, res$padj)
```

Take a log of the P-value

```{r}
plot(res$log2FoldChange, log(res$padj))
```

We can flip the y-axis by putting a negative sign on it

```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab= "log2(Fold-change)",
     ylab= "-log(P-value)")
```

Let's save our work to date

```{r}
write.csv(res, file="myresults.csv")
```

To finish off let's make a nicer volcano plot

Add the log2 threshold lines at +2/-2 Add P-value threshold lines at 0.05 Add color to highlight the subset of genes that meet both of the above thresholds (pick your favorite color) Make it with ggplot please...

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange >= 2] <- "blue"
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$padj > 0.05] <- "gray"
```

```{r}
ggplot(res) + 
  aes(log2FoldChange, -log(padj)) + 
  geom_point(cols=mycols)+ 
  geom_vline(xintercept = c(-2,2), col="red") +
  geom_hline(yintercept = -log(0.05), col = "red") +
  labs(title = "Volcano Plot") 
```

We will use some BioConductor packages to "map" the Ensemble ids to more useful gene SYMBOL names/ids.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

```{r}
print(res)
```

Let's add SYMBOL, GENENAME, & ENTREZID

```{r}
res$symbol <- mapIds(org.Hs.eg.db, 
                     key=rownames(res),
                     keytype = "ENSEMBL",
                     column = "SYMBOL")

res$genename <- mapIds(org.Hs.eg.db, 
                     key=rownames(res),
                     keytype = "ENSEMBL",
                     column = "GENENAME")
res$entrez <-  mapIds(org.Hs.eg.db, 
                     key=rownames(res),
                     keytype = "ENSEMBL",
                     column = "ENTREZID")

head(res)
```

## Pathway Analysis

Now I know the gene names and their IDs in different databases I want to know what type of biology they are involved in.

This is the job of "pathway analysis" (aka "gene set enrichment")

There are tones of different BioConductor packages for packages for pathway analysis here we use just one of them called **gage** and **pathview**. I will install these packages with `BiocManager::install(c("gage", "pathview", "gageData"))`

```{r}
library(gage)
library(gageData)
library(pathview)
```

Load up the KEGG genesets

```{r}
data(kegg.sets.hs)
```

```{r}
head(kegg.sets.hs, 2)
```

We will use these KEGG genesets (aka pathways) and our `res` results to see what overlaps. To do this we will use the `gage()` function. For input `gage()` wants just a vector of importance - in our case FoldChange values.

```{r}
foldchanges <- res$log2FoldChange
```

Vectors in R can hwe "names" that are useful

```{r}

x <- c(10, 100, 20)
names(x) <- c("barry", "alice", "chandra")
```

Let's put names on our `foldchanges` vector - here we will use `res$entrez`

```{r}
names(foldchanges) <- res$entrez
```

```{r}
keggres = gage(foldchanges, gsets= kegg.sets.hs)
```

```{r}
head(keggres$less)
```

We can get a pathway image file with our genesets highlighted via the `pathview()` function.

```{r}
pathview(foldchanges, pathway.id = "hsa05310")
```

Insert this figure in my report

![](hsa05310.pathview.png)
