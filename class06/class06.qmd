---
title: "R functions"
author: "Chris Yi (A16849780)"
format: pdf
editor: visual
---

Today we will get more exposure to functions in R. We call functions to do all our work and today we will learn how to write our own.

## First function

When setting default values to arguments, we don't have to supply them when we call our function.

```{r}
add <- function(x,y) {x + y}
```

```{r}
add(1,1)
add(1,c(10,100))
```

```{r}
add0 <- function(x, y=0) {x+y}
```

```{r}
add0(100)
```

```{r}
addz <- function(x, y, z) {x + y + z}
```

```{r}
addz(1, 2, 3)
```

## Second function

Let's write a function that generates random nucleotide sequences.

We can make use of the in-built `sample()` function in R to help us here.

```{r}
sample(1:10, size=9)
```

```{r}
sample(1:10, size=11, replace = TRUE)
```

> Can you use `sample()` to generate a random nucleotide sequence of length 5.

```{r}
sample(x=c("A","T","C","G"), size=5, replace = TRUE)
```

> Q. Write a function `generate_dna()` that makes a nucleotide sequence of a user specified length.

Every function in R has at least 3 things:

-   a **name** (in our case, "generate_dna")
-   one or more **input arguments** (the length of sequence we want)
-   a **body** (R code that does the work)

```{r}
generate_dna <- function(length=5) {
  bases <- c("A", "C", "T", "G")
  sample(bases, size=length, replace = TRUE)
  
}
```

```{r}
generate_dna(100)
```

> Q. Can you write a `generate_protein()` function that returns amino acid sequence of a user requested length?

```{r}
aa <- bio3d::aa.table$aa1[1:20]
```

```{r}
generate_protein <- function(length=20) {
  amino_acids <- aa
  sample(amino_acids, size=length, replace = TRUE)
}
```

```{r}
generate_protein(100)
```

I want my output of this function not to be a vector with one amino acid per element but rather a one element single string.

```{r}
bases <- c("A", "G", "C", "T")
paste(bases, collapse="")
```

```{r}
generate_protein <- function(length=20) {
  amino_acids <- aa
  s <- sample(amino_acids, size=length, replace = TRUE)
  paste(s, collapse="")
}
```

```{r}
generate_protein()
```

> Q. Generate protein sequences from length 6 to 12

We can use the useful utility function `sapply()` to help us "apply" our function over all the values 6 to 12.

```{r}
ans <- sapply(6:12, generate_protein)
ans
```

```{r}
cat( paste(">ID.", 6:12, sep="","\n", ans, "\n") )
```

> Q. Are any of these sequences unique in nature - i.e. never found in nature. We can search "refseq-protein" and look for 100% Ide and 100% coverages matches wtih BLASTp.

Yes
